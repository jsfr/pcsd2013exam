package com.acertainsupplychain.server;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.handler.AbstractHandler;

import com.acertainsupplychain.business.ItemQuantity;
import com.acertainsupplychain.business.OrderStep;
import com.acertainsupplychain.exception.OrderProcessingException;
import com.acertainsupplychain.interfaces.ItemSupplier;
import com.acertainsupplychain.utils.ItemSupplierMessageTag;
import com.acertainsupplychain.utils.SupplyChainResponse;
import com.acertainsupplychain.utils.SupplyChainUtility;

public class ItemSupplierHTTPMessageHandler extends AbstractHandler {

    private ItemSupplier supplier;
    
    public ItemSupplierHTTPMessageHandler(ItemSupplier supplier) {
        this.supplier = supplier;
    }

    @SuppressWarnings("unchecked")
    @Override
    public void handle(String target, Request baseRequest,
            HttpServletRequest request, HttpServletResponse response)
                    throws IOException, ServletException {
        String requestURI;
        ItemSupplierMessageTag messageTag;

        response.setContentType("text/html;charset=utf-8");
        response.setStatus(HttpServletResponse.SC_OK);
        requestURI = request.getRequestURI();
        System.out.println(requestURI);

        messageTag = SupplyChainUtility.
                convertURItoItemSupplierMessageTag(requestURI);

        // the RequestURI before the switch
        if (messageTag == null) {
            System.out.println("Unknown message tag");
        } else {
            String xml;
            SupplyChainResponse supplyChainResponse;
            // Write requests should not be handled
            switch (messageTag) {
            case EXECUTESTEP:
                xml = SupplyChainUtility.extractPOSTDataFromRequest(request);
                OrderStep step = (OrderStep) SupplyChainUtility.deserializeXMLStringToObject(xml);
                supplyChainResponse = new SupplyChainResponse();
                try {
                    supplier.executeStep(step);
                } catch (OrderProcessingException ex) {
                    supplyChainResponse.setException(ex);
                }
                response.getWriter().println(SupplyChainUtility.serializeObjectToXMLString(response));
                break;
            case GETORDERS:
                xml = SupplyChainUtility.extractPOSTDataFromRequest(request);
                Set<Integer> itemIds = (Set<Integer>) SupplyChainUtility.deserializeXMLStringToObject(xml);
                supplyChainResponse = new SupplyChainResponse();
                try {
                    List<ItemQuantity> itemQuantities = supplier.getOrdersPerItem(itemIds);
                    supplyChainResponse.setResultList(itemQuantities);
                } catch (OrderProcessingException ex) {
                    supplyChainResponse.setException(ex);
                }
                response.getWriter().println(SupplyChainUtility.serializeObjectToXMLString(response))
                break;
            default:
                System.out.println("Unhandled message tag");
                break;
            }
            // Mark the request as handled so that the HTTP response can be sent
            baseRequest.setHandled(true);
        }
    }
}
