package com.acertainsupplychain.client;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

import com.acertainsupplychain.business.ItemQuantity;
import com.acertainsupplychain.business.OrderStep;
import com.acertainsupplychain.exception.InvalidItemException;
import com.acertainsupplychain.exception.OrderProcessingException;
import com.acertainsupplychain.interfaces.ItemSupplier;
import com.acertainsupplychain.utils.SupplyChainConstants;

public class ItemSupplierHTTPProxy implements ItemSupplier {
    
    private HttpClient client = null;
    private String filePath = "/home/jens/repos/pcsd2013exam/acertainsupplychain/src/server.properties";

    public ItemSupplierHTTPProxy(int supplierId) throws Exception {
        initializeServerAddress(supplierId);
        client  = new HttpClient();
        client.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
        client.setMaxConnectionsPerAddress(OrderManagerClientConstants.CLIENT_MAX_CONNECTION_ADDRESS);
        client.setThreadPool(new QueuedThreadPool(OrderManagerClientConstants.CLIENT_MAX_THREADSPOOL_THREADS));
        client.setTimeout(OrderManagerClientConstants.CLIENT_MAX_TIMEOUT_MILLISECS);
        client.start();
    }
    
    private void initializeServerAddress(int supplierId) {
        Properties props = new Properties();
        props.load(new FileInputStream(filePath));
        String supplierAddresses = props
                .getProperty(SupplyChainConstants.KEY_SUPPLIERS);
        for (String s : supplierAddresses
                .split(SupplyChainConstants.SUPPLIER_SERV_SPLIT_REGEX)) {
            String[] supplier = s.split(SupplyChainConstants.SUPPLIER_ID_SPLIT_REGEX);
            if (Integer.valueOf(supplier[0]) == supplierId) {
                if (!supplier[1].toLowerCase().startsWith("http://")) {
                    supplier[1] = new String("http://" + supplier[1]);
                }
                if (!supplier[1].endsWith("/")) {
                    supplier[1] = new String(supplier + "/");
                }
                this.serverAddress = supplier[1]
            }
        }
        // TODO Auto-generated method stub
        
    }

    @Override
    public void executeStep(OrderStep step) throws OrderProcessingException {
        // TODO Auto-generated method stub
        
    }

    @Override
    public List<ItemQuantity> getOrdersPerItem(Set<Integer> itemIds)
            throws InvalidItemException {
        // TODO Auto-generated method stub
        return null;
    }

}
