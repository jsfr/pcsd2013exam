package com.acertainsupplychain.business;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import com.acertainsupplychain.exception.InvalidWorkflowException;
import com.acertainsupplychain.exception.OrderProcessingException;
import com.acertainsupplychain.interfaces.OrderManager;
import com.acertainsupplychain.utils.SupplyChainConstants;

public class CertainOrderManager implements OrderManager {
    private static String filePath = "/home/jens/repos/pcsd2013exam/acertainsupplychain/src/server.properties";
    private Map<Integer, List<StepStatus>> workflowMap;
    private HashSet<String> supplierServers;

    public CertainOrderManager() {
        this.workflowMap = new HashMap<Integer, List<StepStatus>>();
        try {
            initializeSupplierMapping();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initializeSupplierMapping() throws Exception {
        Properties props = new Properties();
        this.supplierServers = new HashSet<String>();
        props.load(new FileInputStream(filePath));
        String supplierAddresses = props
                        .getProperty(SupplyChainConstants.KEY_SUPPLIERS);
        for (String supplier : supplierAddresses
                        .split(SupplyChainConstants.SPLIT_REGEX)) {
                if (!supplier.toLowerCase().startsWith("http://")) {
                        supplier = new String("http://" + supplier);
                }
                if (!supplier.endsWith("/")) {
                        supplier = new String(supplier + "/");
                }
                supplierServers.add(supplier);
        }
    }
    
    @SuppressWarnings("unused")
    private void waitForSupplierUpdates(
        List<Future<SupplierResult>> supplierFutures) {
        List<SupplierResult> supplierServers = new ArrayList<SupplierResult>();
        for (Future<SupplierResult> supplierServer : supplierFutures) {
                try {
                        // block until the future result is available
                        supplierServers.add(supplierServer.get());
                } catch (InterruptedException e) {
                        e.printStackTrace();
                } catch (ExecutionException e) {
                        e.printStackTrace();
                }
        }
    
        for (SupplierResult supplierServer : supplierServers) {
                if (!supplierServer.isSuccessful()) {
                        // Remove the server from the list of servers - fail stop model
                        this.supplierServers.remove(supplierServer.getServerAddress());
                }
        }
    }

    @Override
    public int registerOrderWorkflow(List<OrderStep> steps)
            throws OrderProcessingException {
        
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public List<StepStatus> getOrderWorkflowStatus(int orderWorkflowId)
            throws InvalidWorkflowException {
        if (!workflowMap.containsKey(orderWorkflowId)) {
            throw new InvalidWorkflowException(); 
        }
        return workflowMap.get(orderWorkflowId);
    }
}