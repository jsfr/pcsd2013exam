package com.acertainsupplychain.business;

import java.util.concurrent.Callable;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.eclipse.jetty.client.ContentExchange;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.io.Buffer;
import org.eclipse.jetty.io.ByteArrayBuffer;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

import com.acertainsupplychain.client.SupplyChainClientConstants;
import com.acertainsupplychain.exception.OrderProcessingException;
import com.acertainsupplychain.utils.SupplyChainUtility;

public class OrderStepTask implements Callable<OrderStepResult> {

    private HttpClient client;
    private FileHandler fh;
    private Logger logger;
    private OrderStepRequest request;
    private String server;

    /**
     * Used to execute a OrderStep request asynchronously from the OrderManager
     * 
     * @param server Address of the server to which the request should be sent.
     * @param request Request object containing the step to execute at the server. 
     * @param logger The logger used to log whether the task failed of succeeded.
     * @param fh The file handle for the logger, used to flush the log.
     */
    public OrderStepTask(String server, OrderStepRequest request,
            Logger logger, FileHandler fh) {
        this.server = server;
        this.request = request;
        client = new HttpClient();
        this.logger = logger;
        this.fh = fh;

        client.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
        client.setMaxConnectionsPerAddress(SupplyChainClientConstants.CLIENT_MAX_CONNECTION_ADDRESS);
        client.setThreadPool(new QueuedThreadPool(
                SupplyChainClientConstants.CLIENT_MAX_THREADSPOOL_THREADS));
        client.setTimeout(SupplyChainClientConstants.CLIENT_MAX_TIMEOUT_MILLISECS);

        try {
            client.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public OrderStepResult call() {
        String dataSetXmlString = SupplyChainUtility
                .serializeObjectToXMLString(request.getStep());

        Buffer requestContent = new ByteArrayBuffer(dataSetXmlString);

        ContentExchange exchange = new ContentExchange();
        String urlString = server + request.getMessageType();

        exchange.setMethod("POST");
        exchange.setURL(urlString);
        exchange.setRequestContent(requestContent);
        OrderStepResult retval = new OrderStepResult(true);

        try {
            SupplyChainUtility.SendAndRecv(client, exchange);
            synchronized (logger) { // We do this to keep a consistent log
                logger.log(Level.INFO, "SUCCSTEP " + request.getWorkflowId()
                        + " " + request.getStepId());
                fh.flush();
            }
        } catch (OrderProcessingException e) {
            // The exception is not due to response issues, thus do not retry
            if (!e.getMessage().equals(SupplyChainClientConstants.
                    strERR_CLIENT_UNKNOWN) && 
                    !e.getMessage().equals(SupplyChainClientConstants.
                            strERR_CLIENT_REQUEST_TIMEOUT)) {
                retval.setSuccessful(false);
                synchronized (logger) { // We do this to keep a consistent log
                    logger.log(Level.INFO, "FAILSTEP " + request.getWorkflowId()
                            + " " + request.getStepId());
                    fh.flush();
                }
            }
        }

        try {
            client.stop();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return retval;
    }
}
