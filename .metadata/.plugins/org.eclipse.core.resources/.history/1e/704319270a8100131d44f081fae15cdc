package com.acertainsupplychain.client.tests;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.junit.BeforeClass;
import org.junit.Test;

import com.acertainsupplychain.business.CertainOrderManager;
import com.acertainsupplychain.business.ItemQuantity;
import com.acertainsupplychain.business.OrderStep;
import com.acertainsupplychain.client.ItemSupplierHTTPProxy;
import com.acertainsupplychain.client.OrderManagerHTTPProxy;
import com.acertainsupplychain.interfaces.ItemSupplier;
import com.acertainsupplychain.interfaces.OrderManager;
import com.acertainsupplychain.interfaces.OrderManager.StepStatus;

public class SupplyChainProxyTest {
    private static OrderManager ordermanager;
    private static ItemSupplier supplier0, supplier1;
    private static int id0 = 0, id1 = 1;
    private static boolean localTest = true;
    private static Random r = new Random();

    @BeforeClass
    public static void setUpBeforeClass() {
        try {
            if (localTest) {
                ordermanager = new CertainOrderManager();
            } else {
                ordermanager = new OrderManagerHTTPProxy();
            }
            supplier0 = new ItemSupplierHTTPProxy(id0);
            supplier1 = new ItemSupplierHTTPProxy(id1);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSuccesfulWorkOrder() {
        Set<Integer> itemIds0 = new HashSet<Integer>(), itemIds1 = new HashSet<Integer>();
        
        for (int i = 0; i < 9; i ++) {
            itemIds0.add(i);
            itemIds1.add(i+5);
        }
        
        List<ItemQuantity> itemsBefore0 = supplier0.getOrdersPerItem(itemIds0);
        List<ItemQuantity> itemsBefore1 = supplier1.getOrdersPerItem(itemIds1);
        assertEqual(itemIds0.size(), itemsBefore0.size());
        assertEqual(itemIds1.size(), itemsBefore1.size());
        
        for (ItemQuantity i : itemsBefore0) {
            assertEqual(i.getQuantity(), 0);
        }
        for (ItemQuantity i : itemsBefore1) {
            assertEqual(i.getQuantity(), 0);
        }

        List<OrderStep> workflow = new ArrayList<OrderStep>();
        for (int i = 0; i < 100; i++) {
            List<ItemQuantity> items0 = new ArrayList<ItemQuantity>();
            List<ItemQuantity> items1 = new ArrayList<ItemQuantity>();
            for (int j = 0; j < 10; j++) {
                items0.add(new ItemQuantity(r.nextInt(5), r.nextInt()));
                items1.add(new ItemQuantity(5+r.nextInt(5), r.nextInt()));
            }
            workflow.add(new OrderStep(0, items0));
            workflow.add(new OrderStep(1, items1));
        }
        int workflowId = client.registerOrderWorkflow(workflow);
        List<StepStatus> statusList;
        do {
            statusList = client.getOrderWorkflowStatus(workflowId);
        } while (statusList.contains(StepStatus.REGISTERED) && !statusList.contains(StepStatus.FAILED));
        if (statusList.contains(StepStatus.FAILED)) {
            assertTrue(false);
        } else {
            assertTrue(true);
        }
    }

    @Test
    public void testUnsuccesfulWorkOrder() {

    }
}
