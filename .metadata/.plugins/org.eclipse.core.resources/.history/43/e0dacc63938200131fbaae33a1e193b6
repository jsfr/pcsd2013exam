package com.acertainsupplychain.client.workload;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.FileHandler;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

import com.acertainsupplychain.business.CertainOrderManager;
import com.acertainsupplychain.client.ItemSupplierHTTPProxy;
import com.acertainsupplychain.interfaces.ItemSupplier;
import com.acertainsupplychain.interfaces.OrderManager;
public class CertainWorkload {

    private static Logger logger = Logger.getLogger(CertainWorkload.class.getName());
    private static FileHandler fh = new FileHandler(CertainWorkload.class.getName() + ".log");

    private static int intArg(String[] args, int argNum) throws IndexOutOfBoundsException {
        return Integer.parseInt(args[argNum]);
    }

    /**
     * @param args
     */
    public static void main(String[] args) throws Exception {

        int numConcurrentWorkloadThreadsStep = 1;
        int numConcurrentWorkloadThreadsMax = 30;
        int numRunsPerStep = 10;

        try {
            numConcurrentWorkloadThreadsMax = intArg(args,0);
            numRunsPerStep = intArg(args, 1);
            numConcurrentWorkloadThreadsMax = intArg(args, 2);

        } catch (IndexOutOfBoundsException e) {
            //Just ignore this
        }

        logger.setUseParentHandlers(false);
        logger.addHandler(fh);
        Formatter datFormatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                AggregateResult result = (AggregateResult) record.getParameters()[0];
                StringBuffer sb = new StringBuffer(1000);
                sb.append(result.getNumWorkers());
                sb.append('\t');
                sb.append(result.getAggregateThroughput());
                sb.append('\t');
                sb.append(result.getAverageLatency());
                sb.append('\t');
                sb.append(result.getSuccRatio());
                sb.append('\t');
                sb.append(result.getOrderManagerXactRatio());
                sb.append('\n');
                return sb.toString();
            }
            public String getHead(Handler h) {
                return "workers\tthroughput (succXact/s)\tlatency (s)\tsuccRatio\tcustomerXactRatio\n";
            }
        };
        fh.setFormatter(datFormatter);
        logger.setLevel(Level.ALL);

        //new Thread(new ServerRunnable("0", "8082", Server.ITEMSUPPLIER_SERVER)).start();

        runTests(numConcurrentWorkloadThreadsStep, numConcurrentWorkloadThreadsMax, numRunsPerStep);
    }

    public static void runTests(int step, int max, int runs) throws Exception {
        List<WorkerRunResult> workerRunResults;
        List<Future<WorkerRunResult>> runResults;
        ExecutorService exec;
        WorkloadConfiguration config;
        Worker workerTask;

        for(int j = step; j < max+1; j = j + step) {
            for (int k = 0; k < runs; k++) {

                //We want the same number of workers for all tests in this step
                exec = Executors.newFixedThreadPool(j);
                workerRunResults = new ArrayList<WorkerRunResult>();

                runResults = new ArrayList<Future<WorkerRunResult>>();

                for (int i = 0; i < j; i++) {
                    OrderManager orderManager = new CertainOrderManager(i);
                    ItemSupplier localClient = new ItemSupplierHTTPProxy(0);
                    config = new WorkloadConfiguration(orderManager,
                            localClient);
                    workerTask = new Worker(config);

                    // Keep the futures to wait for the result from the thread
                    runResults.add(exec.submit(workerTask));
                }


                // Get the results from the threads using the futures returned
                for (Future<WorkerRunResult> futureRunResult : runResults) {
                    WorkerRunResult runResult = futureRunResult.get(); // blocking call
                    workerRunResults.add(runResult);
                }

                exec.awaitTermination(100, TimeUnit.MILLISECONDS); // shutdown the executor
                reportMetric(workerRunResults);
                exec = null;
            }
        }
    }

    public static void reportMetric(List<WorkerRunResult> workerRunResults) {
        try {
            double aggregateThroughput = 0D;
            long totalLatency = 0L;
            double averageLatency = 0D;
            double succRatio = 0D;
            double orderManagerXactRatio = 0D;
            int numWorkers = workerRunResults.size();
            double sumOrderManagerSuccInteractions = 0D;
            double sumAllInteractions = 0D;
            double sumAllSuccInteractions = 0D;

            for(WorkerRunResult result : workerRunResults) {
                int interactions = result.getSuccessfulInteraction();
                double time = result.getTimeForRunsInNanoSecs();
                aggregateThroughput += interactions/time;
                totalLatency += time;
                sumOrderManagerSuccInteractions += result.getNumSuccessfulOrderManagerInteraction();
                sumAllInteractions += result.getNumActualRuns();
                sumAllSuccInteractions += interactions;
            }

            averageLatency = totalLatency / (numWorkers * 1E9);
            orderManagerXactRatio = sumOrderManagerSuccInteractions / sumAllSuccInteractions;
            succRatio = sumAllSuccInteractions / sumAllInteractions;

            Object[] parameters = {new AggregateResult(numWorkers, aggregateThroughput, averageLatency, succRatio, orderManagerXactRatio)};
            LogRecord record = new LogRecord(Level.INFO, "Added result");
            record.setParameters(parameters);
            logger.log(record);
            
        } catch (SecurityException e) {
            e.printStackTrace();
        }
    }
}