package com.acertainsupplychain.client.workload;

import java.util.concurrent.Callable;
import java.util.logging.ConsoleHandler;
import java.util.logging.Logger;

public class Worker implements Callable<WorkerRunResult> {
    private WorkloadConfiguration configuration = null;
    private OrderManager orderManager;
    private int numSuccessfulFrequentBookStoreInteraction = 0;
    private int numTotalFrequentBookStoreInteraction = 0;
    private static Logger logger = Logger.getLogger(Worker.class.getName());

    public Worker(WorkloadConfiguration config) {
            logger.addHandler(new ConsoleHandler());
            logger.info("Worker initialized");
            configuration = config;
            orderManager = new CertainOrderManager(0);
    }

    /**
     * Run the appropriate interaction while trying to maintain the configured
     * distributions
     * 
     * Updates the counts of total runs and successful runs for customer
     * interaction
     * 
     * @param chooseInteraction
     * @return
     */
    private boolean runInteraction(float chooseInteraction) {
            try {
                    if (chooseInteraction < configuration
                                    .getPercentRareStockManagerInteraction()) {
                            runRareStockManagerInteraction();
                    } else if (chooseInteraction < configuration
                                    .getPercentFrequentStockManagerInteraction()) {
                            runFrequentStockManagerInteraction();
                    } else {
                            numTotalFrequentBookStoreInteraction++;
                            runFrequentBookStoreInteraction();
                            numSuccessfulFrequentBookStoreInteraction++;
                    }
            } catch (BookStoreException ex) {
                    //ex.printStackTrace();
                    return false;
            }
            return true;
    }

    /**
     * Run the workloads trying to respect the distributions of the interactions
     * and return result in the end
     */
    public WorkerRunResult call() throws Exception {
            
            int count = 1;
            long startTimeInNanoSecs = 0;
            long endTimeInNanoSecs = 0;
            int successfulInteractions = 0;
            long timeForRunsInNanoSecs = 0;

            Random rand = new Random();
            float chooseInteraction;

            logger.info("Warming up");
            // Perform the warmup runs
            while (count++ <= configuration.getWarmUpRuns()) {
                    chooseInteraction = rand.nextFloat() * 100f;
                    runInteraction(chooseInteraction);
            }

            count = 1;
            numTotalFrequentBookStoreInteraction = 0;
            numSuccessfulFrequentBookStoreInteraction = 0;
            
            logger.info("Starting benchmark" );
            // Perform the actual runs
            startTimeInNanoSecs = System.nanoTime();
            while (count++ <= configuration.getNumActualRuns()) {
                    chooseInteraction = rand.nextFloat() * 100f;
                    if (runInteraction(chooseInteraction)) {
                            successfulInteractions++;
                    }
            }
            endTimeInNanoSecs = System.nanoTime();
            timeForRunsInNanoSecs += (endTimeInNanoSecs - startTimeInNanoSecs);
            logger.info("Benchmark complete");
            return new WorkerRunResult(successfulInteractions,
                            timeForRunsInNanoSecs, configuration.getNumActualRuns(),
                            numSuccessfulFrequentBookStoreInteraction,
                            numTotalFrequentBookStoreInteraction);
    }
}