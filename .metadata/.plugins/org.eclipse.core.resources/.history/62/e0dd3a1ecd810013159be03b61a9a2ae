package com.acertainsupplychain.client.tests;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import org.junit.BeforeClass;
import org.junit.Test;

import com.acertainsupplychain.business.CertainItemSupplier;
import com.acertainsupplychain.business.ItemQuantity;
import com.acertainsupplychain.business.OrderStep;
import com.acertainsupplychain.client.ItemSupplierHTTPProxy;
import com.acertainsupplychain.exception.InvalidItemException;
import com.acertainsupplychain.exception.OrderProcessingException;
import com.acertainsupplychain.interfaces.ItemSupplier;

public class ItemSupplierTest {
    private static ItemSupplier client;
    private static int id = 0;
    private static boolean localTest = false;
    private static Random r = new Random();
    private static int maxQuantity = 1000;

    @BeforeClass
    public static void setUpBeforeClass() {
        try {
            if (localTest) {
                client = new CertainItemSupplier(id);
            } else {
                client = new ItemSupplierHTTPProxy(id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    // This assumes that we use an itemSupplier with itemIds in the range [0;4]
    public void testExecuteStep() throws OrderProcessingException {
        List<ItemQuantity> items = new ArrayList<ItemQuantity>();
        for (int i = 0; i < 50; i++) {
            items.add(new ItemQuantity(r.nextInt(5), r
                    .nextInt(maxQuantity)));
        }
        OrderStep step = new OrderStep(id, items);
        client.executeStep(step);
    }

    @Test(expected = InvalidItemException.class)
    // This assumes that no item with id = -1 exist
    public void testExecuteStepInvalidItemId() throws OrderProcessingException {
        List<ItemQuantity> items = new ArrayList<ItemQuantity>();
        items.add(new ItemQuantity(-1, 1));
        OrderStep step = new OrderStep(id, items);
        client.executeStep(step);
    }

    @Test(expected = OrderProcessingException.class)
    public void testExecuteStepWrongSupplierId()
            throws OrderProcessingException {
        OrderStep step = new OrderStep(id + 1, new ArrayList<ItemQuantity>());
        client.executeStep(step);
    }
    
    @Test(expected = OrderProcessingException.class)
    public void testExecuteStepNegativeQuantity() throws OrderProcessingException {
        List<ItemQuantity> items = new ArrayList<ItemQuantity>();
        items.add(new ItemQuantity(0, -1));
        OrderStep step = new OrderStep(id, items);
        client.executeStep(step);
    }

    @Test
    public void testGetOrdersPerItem() throws OrderProcessingException {
        Set<Integer> itemIds = new HashSet<Integer>();
        for (int i = 0; i < 5; i++) {
            itemIds.add(i);
        }
        List<ItemQuantity> itemsBefore = client.getOrdersPerItem(itemIds);
        assertEquals(itemsBefore.size(), itemIds.size()); // Check that we have
                                                          // as many items as we
                                                          // asked for

        OrderStep step = new OrderStep(id, itemsBefore); // This should double
                                                         // all orders
        client.executeStep(step);

        List<ItemQuantity> itemsAfter = client.getOrdersPerItem(itemIds);
        assertEquals(itemsAfter.size(), itemIds.size()); // Check that we have
                                                         // as many items as we
                                                         // asked for

        for (ItemQuantity i : itemsAfter) {
            int quantityBefore = itemsBefore.get(i.getItemId()).getQuantity();
            int quantityAfter = i.getQuantity();
            assertEquals(2 * quantityBefore, quantityAfter);
        }
    }

    @Test(expected = InvalidItemException.class)
    // This assumes that no item with id = -1 exist
    public void testGetOrdersPerItemInvalidItemId() throws InvalidItemException {
        Set<Integer> itemIds = new HashSet<Integer>();
        itemIds.add(-1);
        client.getOrdersPerItem(itemIds);
    }
}